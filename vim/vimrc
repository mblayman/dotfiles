call plug#begin('~/.vim/plugged')

" LuaFormatter support (i.e., Black for Lua)
" DONE converting to nvim
Plug 'andrejlevkovitch/vim-lua-format'

" TOML syntax highlighting
" DONE converting to nvim
Plug 'cespare/vim-toml'

" Linters and such.
" DONE converting to nvim
Plug 'dense-analysis/ale'

" Go language support
" DONE converting to nvim
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Search in Vim.
" DONE converting to nvim
Plug 'jremmen/vim-ripgrep'
let g:rg_command = 'rg --vimgrep -S'

" Fast file searching with fzf
" DONE converting to nvim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Local Vim settings per project.
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/local_vimrc'

" Handlebars syntax highlighting.
" DONE don't care about this anymore.
Plug 'mustache/vim-mustache-handlebars'

" LSP support in Neovim.
" DONE converting to nvim
if has('nvim')
    Plug 'neovim/nvim-lspconfig'
endif

" Catch common weasel words like 'easy' when writing prose in Markdown.
Plug 'nicholaides/words-to-avoid.vim'

" Black formatter
" DONE converting to nvim
Plug 'psf/black'

" Make the quickfix window modifiable for large find and replace operations.
Plug 'stefandtw/quickfix-reflector.vim'

" Comment stuff out quickly.
" DONE converting to nvim
Plug 'tpope/vim-commentary'

" Smart completion of do/end.
Plug 'tpope/vim-endwise'

" Git in Vim
" DONE converting to nvim
Plug 'tpope/vim-fugitive'

" Fugitive extensions (for Gbrowse GitHub links)
" DONE converting to nvim
Plug 'tpope/vim-rhubarb'

" Surround text with tags and quotes.
" DONE I never think to use this.
Plug 'tpope/vim-surround'

" Convenience shortcuts for quickly navigating quicklists and such.
Plug 'tpope/vim-unimpaired'

" Make netrw more awesome.
Plug 'tpope/vim-vinegar'

" Fix Python autoindent after <CR> following parentheses.
Plug 'Vimjas/vim-python-pep8-indent'

" Integrate a test runner.
Plug 'vim-test/vim-test'

if has('nvim')
    let test#strategy = 'neovim'
endif

" Code completion
Plug 'ycm-core/YouCompleteMe'

" Zig language support
" DONE converting to nvim
Plug 'ziglang/zig.vim'

call plug#end()

" DONE I never use :grep in Vim.
if executable('rg')
  set grepprg=rg\ --color=never
endif

" DONE not needed
let g:ale_lint_on_text_changed = 'never'

" DONE not needed
let g:markdown_fenced_languages = ['python']

" DONE not needed
" Close the preview context helper after leaving insert mode.
let g:ycm_autoclose_preview_window_after_insertion = 1

" local_vimrc is constantly asking if I want to use a local_vimrc
" every time I commit. This is super annoying.
call lh#local_vimrc#munge('whitelist', $HOME)
call lh#local_vimrc#filter_list('asklist', 'v:val != $HOME')

" DONE does not need to carry over to nvim
syntax on

filetype plugin indent on

" DONE replaced by tpope-sleuth plugin
set expandtab
set ts=4 sw=4 sts=4
set list listchars=tab:>-,trail:-
au BufRead,BufNewFile *.go setlocal nolist

" DONE not needed
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.hbs set filetype=html

" DONE converting to nvim
set title

" DONE converting to nvim
let &colorcolumn=81
highlight ColorColumn term=standout ctermbg=7

" DONE nvim set this behavior as the sane default.
set backspace=2 " Make backspace work in a sane manner.

" DONE converting to nvim
autocmd FileType javascript,lua,html,htmldjango,yaml setlocal ts=2 sw=2 sts=2 expandtab
" DONE converting to nvim
set number
" DONE converting to nvim
set relativenumber
" DONE converting to nvim
set scrolloff=10

" Set dark mode stuff
" set background=dark
" colorscheme default
" ALE errors are totally unreadable with the default theme of peachpuff
" highlight ALEError ctermbg=1
" This sets the QuickFix highlighted line to be something other than white text.
" highlight Search ctermfg=4

" I don't really like folds. Disable them (some plugin is enabling by default
" on reStructured Text).
set nofoldenable

" Hide instead of close files when opening a new file while there are unsaved
" changes
set nohidden

" OS X does some weird stuff to PATH on zsh that messes with venvs.
" Using bash is a safe alternative and I don't really need the power
" of zsh through Vim.
set shell=/bin/bash

" Apply vimrc changes immediately.
autocmd BufWritePost vimrc source $MYVIMRC

" Assume HTML files are Django templates for simplicity.
autocmd BufNewFile,BufRead *.html set filetype=htmldjango

" Handlebars syntax highlighting uses a Mustache plugin.
autocmd BufNewFile,BufRead *.hbs set filetype=mustache

" Run Black on save.
autocmd BufWritePre *.py execute ':Black'

" Run LuaFormatter on save.
autocmd BufWrite *.lua call LuaFormat()

" Use a different comment style for Django's HTML templates.
autocmd FileType htmldjango set commentstring={#\ %s\ #}

" Leader commands
" DONE converting to nvim
let mapleader = "\<Space>"

" Quick search
" DONE converting to nvim
nnoremap <Leader>a :Rg 

" Launch fzf
" DONE converting to nvim
nnoremap <Leader>c :GFiles<CR>
nnoremap <Leader>b :Buffers<CR>

" Insert pdb.
nnoremap <Leader>d oimport pdb; pdb.set_trace()<Esc>

" Run a test file.
nmap <silent> <Leader>f :TestFile<CR>

" Run a test suite.
nmap <silent> <Leader>s :TestSuite<CR>

" Run a test.
nmap <silent> <Leader>t :TestNearest<CR>

" Quick save
" DONE converting to nvim
nnoremap <Leader>w :w<CR>

" Escape is so far away.
" DONE converting to nvim
imap <C-l> <Esc>

" Navigate up, down, left, and right between splits.
" DONE converting to nvim
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Go to a definition
" DONE converting to nvim
nnoremap <Leader>y :YcmCompleter GoTo<CR>

" Git
" DONE I never use this
nnoremap <Leader>gb :Git blame<CR>
