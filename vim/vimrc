call plug#begin('~/.vim/plugged')

" Black formatter
Plug 'ambv/black'

" Fast file searching.
Plug 'ctrlpvim/ctrlp.vim'

" Elixir support.
Plug 'elixir-lang/vim-elixir'

" Fix Python autoindent after <CR> following parentheses.
Plug 'hynek/vim-python-pep8-indent'

" Integrate a test runner.
Plug 'janko-m/vim-test'

" Search in Vim.
Plug 'jremmen/vim-ripgrep'
let g:rg_command = 'rg --vimgrep -S --sort path'

" Fast file searching with fzf.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Elm support.
Plug 'lambdatoast/elm.vim'

" Local Vim settings per project.
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/local_vimrc'

" Handlebars syntax highlighting.
Plug 'mustache/vim-mustache-handlebars'

" Catch common weasel words like 'easy' when writing prose in Markdown.
Plug 'nicholaides/words-to-avoid.vim'

" Common LSP configuration
if has('nvim')
    Plug 'neovim/nvim-lspconfig'
endif

" Support for viewing Vue files.
Plug 'posva/vim-vue'

" Make the quickfix window modifiable for large find and replace operations.
Plug 'stefandtw/quickfix-reflector.vim'

" Comment stuff out quickly.
Plug 'tpope/vim-commentary'

" Smart completion of do/end.
Plug 'tpope/vim-endwise'

" Git in Vim
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Surround text with tags and quotes.
Plug 'tpope/vim-surround'

" Convenience shortcuts for quickly navigating quicklists and such.
Plug 'tpope/vim-unimpaired'

" Make netrw more awesome.
Plug 'tpope/vim-vinegar'

" Code completion
Plug 'Valloric/YouCompleteMe'

" Linters and such.
Plug 'w0rp/ale'

call plug#end()

if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

let g:ale_lint_on_text_changed = 'never'
let g:ale_linters = {
\   'python': ['flake8', 'mypy', 'pylint'],
\}

let g:markdown_fenced_languages = ['python']

" Close the preview context helper after leaving insert mode.
let g:ycm_autoclose_preview_window_after_insertion = 1

" local_vimrc is constantly asking if I want to use a local_vimrc
" every time I commit. This is super annoying.
call lh#local_vimrc#munge('whitelist', $HOME)
call lh#local_vimrc#filter_list('asklist', 'v:val != $HOME')

syntax on
filetype plugin indent on
set expandtab
set ts=4 sw=4 sts=4
set list listchars=tab:>-,trail:-
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.hbs set filetype=html
set title
let &colorcolumn=81
highlight ColorColumn term=standout ctermbg=7
set backspace=2 " Make backspace work in a sane manner.
autocmd FileType javascript,lua,html,htmldjango,yaml setlocal ts=2 sw=2 sts=2 expandtab
set number
set relativenumber
set scrolloff=10

" I don't really like folds. Disable them (some plugin is enabling by default
" on reStructured Text).
set nofoldenable

" Hide instead of close files when opening a new file while there are unsaved
" changes
set nohidden

" OS X does some weird stuff to PATH on zsh that messes with venvs.
" Using bash is a safe alternative and I don't really need the power
" of zsh through Vim.
set shell=/bin/bash

" Apply vimrc changes immediately.
autocmd BufWritePost vimrc source $MYVIMRC

" Assume HTML files are Django templates for simplicity.
autocmd BufNewFile,BufRead *.html set filetype=htmldjango

" Handlebars syntax highlighting uses a Mustache plugin.
autocmd BufNewFile,BufRead *.hbs set filetype=mustache

" Run Black on save.
autocmd BufWritePre *.py execute ':Black'

" Use a different comment style for Django's HTML templates.
autocmd FileType htmldjango set commentstring={#\ %s\ #}

" Leader commands
let mapleader = "\<Space>"

" Quick search
nnoremap <Leader>a :Rg 

" Launch CtrlP
nnoremap <Leader>c :GFiles<CR>
nnoremap <Leader>b :Buffers<CR>
" nnoremap <Leader>c :CtrlP<CR>
" nnoremap <Leader>b :CtrlPBuffer<CR>

" Insert pdb.
nnoremap <Leader>d oimport pdb; pdb.set_trace()<Esc>

" Run a test file.
nmap <silent> <Leader>f :TestFile<CR>

" Run a test suite.
nmap <silent> <Leader>s :TestSuite<CR>

" Run a test.
nmap <silent> <Leader>t :TestNearest<CR>

" Quick save
nnoremap <Leader>w :w<CR>

" Escape is so far away.
imap <C-l> <Esc>

" Navigate up, down, left, and right between splits.
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Resize splits.
nnoremap <S-Left> <C-w>3<<CR>
nnoremap <S-Right> <C-w>3><CR>
nnoremap <Leader>J <C-w>10+<CR>
nnoremap <Leader>K <C-w>10-<CR>

" Go to a definition
nnoremap <Leader>y :YcmCompleter GoTo<CR>

" There is some problem with YouCompleteMe and Python 3 support in Vim.
" It's just a deprecation warning.
silent! py3 pass

let test#python#runner = "pytest"
let test#python#pytest#options = "--reuse-db --junit-xml=''"
let test#python#pytest#executable = "tools/pytest"

let g:black_linelength = 119
let g:black_skip_string_normalization = 1
