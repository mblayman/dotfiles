call plug#begin('~/.vim/plugged')

" Elixir support.
Plug 'elixir-lang/vim-elixir'

" Fix Python autoindent after <CR> following parentheses.
Plug 'hynek/vim-python-pep8-indent'

" Integrate a test runner.
Plug 'janko-m/vim-test'

" Fast file searching.
Plug 'kien/ctrlp.vim'

" Elm support.
Plug 'lambdatoast/elm.vim'

" Local Vim settings per project.
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/local_vimrc'

" Handlebars syntax highlighting.
Plug 'mustache/vim-mustache-handlebars'

" Catch common weasel words like 'easy' when writing prose in Markdown.
Plug 'nicholaides/words-to-avoid.vim'

" Search in Vim.
Plug 'rking/ag.vim'

" Syntax highlighting and style checking.
Plug 'Syntastic'

" Comment stuff out quickly.
Plug 'tpope/vim-commentary'

" Smart completion of do/end.
Plug 'tpope/vim-endwise'

" Git in Vim
Plug 'tpope/vim-fugitive'

" Surround text with tags and quotes.
Plug 'tpope/vim-surround'

" Convenience shortcuts for quickly navigating quicklists and such.
Plug 'tpope/vim-unimpaired'

" Make netrw more awesome.
Plug 'tpope/vim-vinegar'

" Code completion
Plug 'Valloric/YouCompleteMe'

" On-demand loading
"Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Plugin options
"Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

call plug#end()

" Make CtrlP ignore files in the .gitignore.
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = "--max-line-length=105"

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_aggregate_errors = 1
" Errors are reachable with :lnext and :lprevious.
let g:syntastic_always_populate_loc_list = 1

let g:markdown_fenced_languages = ['python']

" Close the preview context helper after leaving insert mode.
let g:ycm_autoclose_preview_window_after_insertion = 1

syntax on
filetype plugin indent on
set expandtab
set ts=4 sw=4 sts=4
set list listchars=tab:>-,trail:-
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.hbs set filetype=html
set title
let &colorcolumn=81
highlight ColorColumn term=standout ctermbg=7
set backspace=2 " Make backspace work in a sane manner.
autocmd FileType javascript,html,htmldjango,yaml setlocal ts=2 sw=2 sts=2 expandtab
set number
set relativenumber
set scrolloff=10

" Hide instead of close files when opening a new file while there are unsaved
" changes
set nohidden

" OS X does some weird stuff to PATH on zsh that messes with venvs.
" Using bash is a safe alternative and I don't really need the power
" of zsh through Vim.
set shell=/bin/bash

" Apply vimrc changes immediately.
autocmd BufWritePost vimrc source $MYVIMRC

" Assume HTML files are Django templates for simplicity.
autocmd BufNewFile,BufRead *.html set filetype=htmldjango

" Handlebars syntax highlighting uses a Mustache plugin.
autocmd BufNewFile,BufRead *.hbs set filetype=mustache

" Use a different comment style for Django's HTML templates.
autocmd FileType htmldjango set commentstring={#\ %s\ #}

" Leader commands
let mapleader = "\<Space>"

" Quick search
nnoremap <Leader>a :Ag 

" Launch CtrlP
nnoremap <Leader>c :CtrlP<CR>
nnoremap <Leader>b :CtrlPBuffer<CR>

" Insert pdb.
nnoremap <Leader>d oimport pdb; pdb.set_trace()<Esc>

" Run a test file.
nmap <silent> <Leader>f :TestFile<CR>

" Run a test suite.
nmap <silent> <Leader>s :TestSuite<CR>

" Run a test.
nmap <silent> <Leader>t :TestNearest<CR>

" Quick save
nnoremap <Leader>w :w<CR>

" Escape is so far away.
imap <C-l> <Esc>

" Navigate up, down, left, and right between splits.
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

" Go to a definition
nnoremap <Leader>y :YcmCompleter GoTo<CR>
